# Generated by Django 5.2.1 on 2025-05-16 04:47

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('accounting', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AccountingEntryType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Date and time when the record was created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='updated at')),
                ('code', models.CharField(help_text='Unique code for accounting entry type', max_length=5, unique=True, verbose_name='code')),
                ('name', models.CharField(help_text='Name of accounting entry type', max_length=255, verbose_name='name')),
                ('indicator_code', models.CharField(help_text='Indicator code for accounting entry type', max_length=5, verbose_name='indicator code')),
                ('indicator_name', models.CharField(help_text='Indicator name for accounting entry type', max_length=255, verbose_name='indicator name')),
            ],
            options={
                'verbose_name': 'Accounting Entry Type',
                'verbose_name_plural': 'Accounting Entry Types',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Date and time when the record was created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='updated at')),
                ('code', models.CharField(help_text='Unique code for activity', max_length=5, unique=True, verbose_name='code')),
                ('name', models.CharField(help_text='Name of activity', max_length=255, verbose_name='name')),
            ],
            options={
                'verbose_name': 'Activity',
                'verbose_name_plural': 'Activities',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='ClientAccountType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Date and time when the record was created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='updated at')),
                ('code', models.CharField(help_text='Unique code for client account type', max_length=5, unique=True, verbose_name='code')),
                ('name', models.CharField(help_text='Name of client account type', max_length=255, verbose_name='name')),
            ],
            options={
                'verbose_name': 'Client Account Type',
                'verbose_name_plural': 'Client Account Types',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='EngagementType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Date and time when the record was created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='updated at')),
                ('code', models.CharField(help_text='Unique code for engagement type', max_length=5, unique=True, verbose_name='code')),
                ('name', models.CharField(help_text='Name of engagement type', max_length=255, verbose_name='name')),
            ],
            options={
                'verbose_name': 'Engagement Type',
                'verbose_name_plural': 'Engagement Types',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='Municipality',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Date and time when the record was created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='updated at')),
                ('insee_code', models.CharField(help_text='Official INSEE identification code for municipality', max_length=5, unique=True, verbose_name='INSEE code')),
                ('name', models.CharField(help_text='Name of municipality', max_length=255, verbose_name='name')),
                ('postal_code', models.CharField(help_text='Postal code of municipality', max_length=5, verbose_name='postal code')),
                ('department_code', models.CharField(help_text='Department code', max_length=3, verbose_name='department code')),
                ('region_code', models.CharField(help_text='Region code', max_length=3, verbose_name='region code')),
            ],
            options={
                'verbose_name': 'Municipality',
                'verbose_name_plural': 'Municipalities',
                'ordering': ['insee_code'],
            },
        ),
        migrations.CreateModel(
            name='PayerType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Date and time when the record was created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='updated at')),
                ('code', models.CharField(help_text='Unique code for payer type', max_length=5, unique=True, verbose_name='code')),
                ('name', models.CharField(help_text='Name of payer type', max_length=255, verbose_name='name')),
            ],
            options={
                'verbose_name': 'Payer Type',
                'verbose_name_plural': 'Payer Types',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='PricingType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Date and time when the record was created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='updated at')),
                ('code', models.CharField(help_text='Unique code for pricing type', max_length=5, unique=True, verbose_name='code')),
                ('name', models.CharField(help_text='Name of pricing type', max_length=255, verbose_name='name')),
            ],
            options={
                'verbose_name': 'Pricing Type',
                'verbose_name_plural': 'Pricing Types',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='ReconciliationType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Date and time when the record was created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='updated at')),
                ('code', models.CharField(help_text='Unique code for reconciliation type', max_length=5, unique=True, verbose_name='code')),
                ('name', models.CharField(help_text='Name of reconciliation type', max_length=255, verbose_name='name')),
            ],
            options={
                'verbose_name': 'Reconciliation Type',
                'verbose_name_plural': 'Reconciliation Types',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='ServiceType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Date and time when the record was created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='updated at')),
                ('id_service_type', models.CharField(help_text='Unique ID for service type', max_length=10, unique=True, verbose_name='service type ID')),
                ('code', models.CharField(help_text='Code for service type', max_length=5, verbose_name='code')),
                ('name', models.CharField(help_text='Name of service type', max_length=255, verbose_name='name')),
                ('category_code', models.CharField(help_text='Category code', max_length=5, verbose_name='category code')),
                ('category_name', models.CharField(help_text='Category name', max_length=255, verbose_name='category name')),
            ],
            options={
                'verbose_name': 'Service Type',
                'verbose_name_plural': 'Service Types',
                'ordering': ['code'],
            },
        ),
        migrations.AddField(
            model_name='accountingentry',
            name='is_recurring',
            field=models.BooleanField(default=False, help_text='Whether this is a recurring entry', verbose_name='is recurring'),
        ),
        migrations.AddField(
            model_name='accountingentry',
            name='period_code',
            field=models.CharField(blank=True, help_text='Accounting period code', max_length=10, null=True, verbose_name='period code'),
        ),
        migrations.AddField(
            model_name='accountingentry',
            name='reconciliation_status',
            field=models.CharField(blank=True, help_text='Status of reconciliation for this entry', max_length=20, null=True, verbose_name='reconciliation status'),
        ),
        migrations.AddField(
            model_name='accountingentryline',
            name='analytical_code',
            field=models.CharField(blank=True, help_text='Analytical code for reporting', max_length=20, null=True, verbose_name='analytical code'),
        ),
        migrations.AddField(
            model_name='accountingentryline',
            name='reconciliation_code',
            field=models.CharField(blank=True, help_text='Code used for reconciliation of this line', max_length=20, null=True, verbose_name='reconciliation code'),
        ),
        migrations.AddField(
            model_name='accountingentry',
            name='entry_type',
            field=models.ForeignKey(blank=True, help_text='Type of accounting entry (e.g., budget, analytical)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='entries', to='accounting.accountingentrytype'),
        ),
        migrations.AddField(
            model_name='accountingentry',
            name='activity',
            field=models.ForeignKey(blank=True, help_text='Activity associated with this entry', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='entries', to='accounting.activity'),
        ),
        migrations.AddField(
            model_name='accountingentryline',
            name='client_account_type',
            field=models.ForeignKey(blank=True, help_text='Type of client account if applicable', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='entry_lines', to='accounting.clientaccounttype'),
        ),
        migrations.AddField(
            model_name='accountingentry',
            name='engagement_type',
            field=models.ForeignKey(blank=True, help_text='Type of engagement (e.g., order, contract)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='entries', to='accounting.engagementtype'),
        ),
        migrations.AddField(
            model_name='accountingentryline',
            name='municipality',
            field=models.ForeignKey(blank=True, help_text='Municipality associated with this line', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='entry_lines', to='accounting.municipality'),
        ),
        migrations.AddField(
            model_name='accountingentryline',
            name='payer_type',
            field=models.ForeignKey(blank=True, help_text='Type of payer if applicable', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='entry_lines', to='accounting.payertype'),
        ),
        migrations.AddField(
            model_name='accountingentryline',
            name='pricing_type',
            field=models.ForeignKey(blank=True, help_text='Type of pricing if applicable', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='entry_lines', to='accounting.pricingtype'),
        ),
        migrations.AddField(
            model_name='accountingentryline',
            name='reconciliation_type',
            field=models.ForeignKey(blank=True, help_text='Type of reconciliation if applicable', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='entry_lines', to='accounting.reconciliationtype'),
        ),
        migrations.AddField(
            model_name='accountingentry',
            name='service_type',
            field=models.ForeignKey(blank=True, help_text='Service type associated with this entry', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='entries', to='accounting.servicetype'),
        ),
    ]
