# Generated by Django 5.2.1 on 2025-05-14 05:16

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(blank=True, help_text='Optional username for backward compatibility', max_length=150, null=True, unique=True, verbose_name='username')),
                ('email', models.EmailField(help_text='Required. Your email address for login', max_length=254, unique=True, validators=[django.core.validators.EmailValidator()], verbose_name='email address')),
                ('employee_id', models.CharField(blank=True, help_text='Internal employee identifier', max_length=20, verbose_name='employee ID')),
                ('department', models.CharField(blank=True, help_text='Department where the user works', max_length=100, verbose_name='department')),
                ('position', models.CharField(blank=True, help_text='Job title or position', max_length=100, verbose_name='position')),
                ('phone_number', models.CharField(blank=True, help_text='Contact phone number with country code', max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')], verbose_name='phone number')),
                ('mobile_number', models.CharField(blank=True, help_text='Mobile phone number with country code', max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')], verbose_name='mobile number')),
                ('is_supplier', models.BooleanField(default=False, help_text='Whether this user represents a supplier', verbose_name='supplier user')),
                ('language', models.CharField(choices=[('en', 'English'), ('fr', 'French'), ('es', 'Spanish'), ('de', 'German')], default='en', help_text='Preferred language for communications', max_length=2, verbose_name='preferred language')),
                ('last_login_ip', models.GenericIPAddressField(blank=True, help_text='IP address of the last login', null=True, verbose_name='last login IP')),
                ('failed_login_attempts', models.PositiveSmallIntegerField(default=0, help_text='Count of consecutive failed login attempts', verbose_name='failed login attempts')),
                ('account_locked_until', models.DateTimeField(blank=True, help_text='Time until which account is locked', null=True, verbose_name='account locked until')),
                ('profile_picture', models.ImageField(blank=True, help_text="User's profile image", null=True, upload_to='profile_pics/', verbose_name='profile picture')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Date and time when the user was created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the user was last updated', verbose_name='updated at')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'ordering': ['email'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, help_text='Short biography or description', verbose_name='biography')),
                ('date_of_birth', models.DateField(blank=True, help_text="User's birth date", null=True, verbose_name='date of birth')),
                ('address', models.CharField(blank=True, help_text="User's address", max_length=255, verbose_name='address')),
                ('city', models.CharField(blank=True, help_text="User's city", max_length=100, verbose_name='city')),
                ('country', models.CharField(blank=True, help_text="User's country", max_length=100, verbose_name='country')),
                ('organization', models.CharField(blank=True, help_text="User's organization or company", max_length=100, verbose_name='organization')),
                ('social_linkedin', models.URLField(blank=True, help_text='LinkedIn profile URL', verbose_name='LinkedIn')),
                ('notification_email', models.BooleanField(default=True, help_text='Whether to receive emails for notifications', verbose_name='email notifications')),
                ('notification_sms', models.BooleanField(default=False, help_text='Whether to receive SMS for notifications', verbose_name='SMS notifications')),
                ('user', models.OneToOneField(help_text='User this profile belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'user profile',
                'verbose_name_plural': 'user profiles',
                'ordering': ['user__email'],
            },
        ),
    ]
