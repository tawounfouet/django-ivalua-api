# Generated by Django 5.2.1 on 2025-05-14 05:16

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Date and time when the record was created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='updated at')),
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(help_text='Identifier in the external system', verbose_name='object ID')),
                ('code', models.CharField(help_text='Internal Ivalua code (e.g., SUP000001)', max_length=20, verbose_name='code')),
                ('erp_code', models.CharField(blank=True, help_text='External IKOS code', max_length=20, verbose_name='ERP code')),
                ('supplier_name', models.CharField(help_text='Commercial or common name of the supplier', max_length=255, verbose_name='supplier name')),
                ('is_physical_person', models.BooleanField(default=False, help_text='Whether the supplier is an individual rather than a company', verbose_name='physical person')),
                ('title', models.CharField(blank=True, help_text='Personal title (Mr., Mrs., etc.)', max_length=10, verbose_name='title')),
                ('first_name', models.CharField(blank=True, help_text='First name if the supplier is a person', max_length=100, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, help_text='Last name if the supplier is a person', max_length=100, verbose_name='last name')),
                ('legal_name', models.CharField(help_text='Official registered name of the company', max_length=255, verbose_name='legal name')),
                ('website', models.URLField(blank=True, help_text='Company website URL', verbose_name='website')),
                ('nat_id_type', models.CharField(blank=True, choices=[('01', 'SIRET'), ('05', 'VAT'), ('06', 'Non-EU'), ('07', 'TAHITI'), ('08', 'RIDET'), ('09', 'French supplier without SIRET'), ('10', 'FRWF'), ('11', 'IREP')], help_text='Type of national identifier', max_length=2, verbose_name='national ID type')),
                ('nat_id', models.CharField(blank=True, help_text='National identifier value', max_length=50, verbose_name='national ID')),
                ('type_ikos_code', models.CharField(choices=[('FRS', 'Supplier'), ('IBE', 'SEQENS Co-ownership Syndicate'), ('SYN', 'Co-ownership Syndicate')], default='FRS', help_text='Code for the IKOS supplier type', max_length=3, verbose_name='IKOS type code')),
                ('siret', models.CharField(blank=True, help_text='French company identifier (14 digits)', max_length=14, validators=[django.core.validators.RegexValidator(message='SIRET must be exactly 14 digits', regex='^\\d{14}$')], verbose_name='SIRET')),
                ('siren', models.CharField(blank=True, help_text='French company base identifier (9 digits)', max_length=9, validators=[django.core.validators.RegexValidator(message='SIREN must be exactly 9 digits', regex='^\\d{9}$')], verbose_name='SIREN')),
                ('duns', models.CharField(blank=True, help_text='Dun & Bradstreet unique identifier', max_length=9, verbose_name='DUNS')),
                ('tva_intracom', models.CharField(blank=True, help_text='Intra-community VAT number', max_length=20, verbose_name='intra-EU VAT')),
                ('ape_naf', models.CharField(blank=True, help_text='French activity code (format: 00.00X)', max_length=10, verbose_name='APE/NAF')),
                ('creation_year', models.CharField(blank=True, help_text='Year the supplier company was created', max_length=4, verbose_name='creation year')),
                ('creation_system_date', models.DateField(help_text='Date when the supplier was created in the system', verbose_name='creation date')),
                ('modification_system_date', models.DateField(blank=True, help_text='Date of last modification', null=True, verbose_name='modification date')),
                ('deleted_system_date', models.DateField(blank=True, help_text='Date when the supplier was deleted', null=True, verbose_name='deletion date')),
                ('latest_modification_date', models.DateField(blank=True, help_text='Date of the latest modification of any supplier data', null=True, verbose_name='latest modification date')),
                ('status', models.CharField(choices=[('val', 'Valid'), ('del', 'Deleted'), ('ini', 'Initial'), ('dra', 'Draft')], default='ini', help_text='Current status of the supplier record', max_length=3, verbose_name='status')),
                ('legal_code', models.CharField(blank=True, help_text='Legal form code', max_length=20, verbose_name='legal code')),
                ('legal_structure', models.CharField(blank=True, help_text='Description of legal structure', max_length=100, verbose_name='legal structure')),
            ],
            options={
                'verbose_name': 'supplier',
                'verbose_name_plural': 'suppliers',
                'ordering': ['code', 'supplier_name'],
                'indexes': [models.Index(fields=['code'], name='suppliers_s_code_d1984e_idx'), models.Index(fields=['nat_id'], name='suppliers_s_nat_id_a3a539_idx'), models.Index(fields=['siret'], name='suppliers_s_siret_12c8d9_idx'), models.Index(fields=['siren'], name='suppliers_s_siren_7b5222_idx')],
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Date and time when the record was created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='updated at')),
                ('is_internal', models.BooleanField(default=False, help_text='Whether the contact belongs to the organization rather than the supplier', verbose_name='internal contact')),
                ('first_name', models.CharField(help_text='First name of the contact', max_length=100, verbose_name='first name')),
                ('last_name', models.CharField(help_text='Last name of the contact', max_length=100, verbose_name='last name')),
                ('email', models.EmailField(help_text='Email address of the contact', max_length=254, verbose_name='email')),
                ('login', models.CharField(blank=True, help_text='System login username, if applicable', max_length=100, verbose_name='login')),
                ('supplier', models.ForeignKey(help_text='The supplier this contact is associated with', on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to='suppliers.supplier', verbose_name='supplier')),
            ],
            options={
                'verbose_name': 'contact',
                'verbose_name_plural': 'contacts',
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='BankingInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Date and time when the record was created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='updated at')),
                ('international_pay_id', models.CharField(blank=True, help_text='International payment identifier', max_length=10, verbose_name='international payment ID')),
                ('account_number', models.CharField(help_text='Bank account number', max_length=50, verbose_name='account number')),
                ('bank_code', models.CharField(blank=True, help_text='Bank identifier code', max_length=20, verbose_name='bank code')),
                ('counter_code', models.CharField(blank=True, help_text='Bank counter code', max_length=20, verbose_name='counter code')),
                ('rib_key', models.CharField(blank=True, help_text='RIB key for validation', max_length=10, verbose_name='RIB key')),
                ('bban', models.CharField(blank=True, help_text='Basic Bank Account Number', max_length=50, verbose_name='BBAN')),
                ('iban', models.CharField(help_text='International Bank Account Number', max_length=34, validators=[django.core.validators.RegexValidator(message='IBAN must be in the correct format (e.g., FR7610278021310002041940126)', regex='^[A-Z]{2}\\d{2}[A-Z0-9]{10,30}$')], verbose_name='IBAN')),
                ('bic', models.CharField(blank=True, help_text='Bank Identifier Code (SWIFT code)', max_length=11, validators=[django.core.validators.RegexValidator(message='BIC must be 8 or 11 characters (e.g., CMCIFR2A)', regex='^[A-Z]{6}[A-Z0-9]{2}([A-Z0-9]{3})?$')], verbose_name='BIC')),
                ('country_code', models.CharField(help_text='ISO country code', max_length=2, verbose_name='country code')),
                ('bank_label', models.CharField(help_text='Name of the bank', max_length=255, verbose_name='bank name')),
                ('creation_account_date', models.DateField(blank=True, help_text='Date when the account was created', null=True, verbose_name='creation date')),
                ('modification_account_date', models.DateField(blank=True, help_text='Date when the account was last modified', null=True, verbose_name='modification date')),
                ('supplier', models.ForeignKey(help_text='The supplier this banking information belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='banking_informations', to='suppliers.supplier', verbose_name='supplier')),
            ],
            options={
                'verbose_name': 'banking information',
                'verbose_name_plural': 'banking information',
            },
        ),
        migrations.CreateModel(
            name='SupplierAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Date and time when the record was created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='updated at')),
                ('adr1', models.CharField(blank=True, help_text='First line of address, typically country code', max_length=255, verbose_name='address line 1')),
                ('adr2', models.CharField(blank=True, help_text='Second line of address, typically street address', max_length=255, verbose_name='address line 2')),
                ('adr3', models.CharField(blank=True, help_text='Third line of address, additional information', max_length=255, verbose_name='address line 3')),
                ('zip', models.CharField(blank=True, help_text='ZIP or postal code', max_length=20, verbose_name='ZIP/postal code')),
                ('city', models.CharField(blank=True, help_text='City name', max_length=100, verbose_name='city')),
                ('supplier', models.OneToOneField(help_text='The supplier this address belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='address', to='suppliers.supplier', verbose_name='supplier')),
            ],
            options={
                'verbose_name': 'supplier address',
                'verbose_name_plural': 'supplier addresses',
            },
        ),
        migrations.CreateModel(
            name='SupplierPartner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Date and time when the record was created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='updated at')),
                ('orga_level', models.CharField(help_text='Code representing the level in the organization hierarchy', max_length=10, verbose_name='organization level')),
                ('orga_node', models.CharField(help_text='Identifier for the specific organizational unit', max_length=20, verbose_name='organization node')),
                ('num_part', models.PositiveIntegerField(help_text='Numeric identifier for the partnership', verbose_name='partner number')),
                ('status', models.CharField(choices=[('val', 'Valid'), ('del', 'Deleted'), ('ini', 'Initial'), ('dra', 'Draft')], default='val', help_text='Current status of the partnership', max_length=3, verbose_name='status')),
                ('supplier', models.ForeignKey(help_text='The supplier this partnership is associated with', on_delete=django.db.models.deletion.CASCADE, related_name='partners', to='suppliers.supplier', verbose_name='supplier')),
            ],
            options={
                'verbose_name': 'supplier partner',
                'verbose_name_plural': 'supplier partners',
                'ordering': ['orga_level', 'orga_node'],
            },
        ),
        migrations.CreateModel(
            name='SupplierRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Date and time when the record was created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='updated at')),
                ('orga_level', models.CharField(help_text='Code representing the level in the organization hierarchy', max_length=10, verbose_name='organization level')),
                ('orga_node', models.CharField(help_text='Identifier for the specific organizational unit', max_length=20, verbose_name='organization node')),
                ('role_code', models.CharField(help_text='Code identifier for the role type', max_length=10, verbose_name='role code')),
                ('role_label', models.CharField(help_text='Human-readable description of the role', max_length=100, verbose_name='role description')),
                ('begin_date', models.DateField(blank=True, help_text='Date when the role became effective', null=True, verbose_name='start date')),
                ('end_date', models.DateField(blank=True, help_text='Date when the role expires or ended', null=True, verbose_name='end date')),
                ('status', models.CharField(choices=[('val', 'Valid'), ('del', 'Deleted'), ('ini', 'Initial'), ('dra', 'Draft')], default='val', help_text='Current status of the role assignment', max_length=3, verbose_name='status')),
                ('supplier', models.ForeignKey(help_text='The supplier this role is assigned to', on_delete=django.db.models.deletion.CASCADE, related_name='roles', to='suppliers.supplier', verbose_name='supplier')),
            ],
            options={
                'verbose_name': 'supplier role',
                'verbose_name_plural': 'supplier roles',
                'ordering': ['orga_level', 'orga_node', 'role_code'],
            },
        ),
        migrations.CreateModel(
            name='ContactRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Date and time when the record was created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='updated at')),
                ('code', models.CharField(help_text='Code identifier for the role', max_length=20, verbose_name='role code')),
                ('label', models.CharField(help_text='Human-readable name or description of the role', max_length=100, verbose_name='role label')),
                ('contact', models.ForeignKey(help_text='The contact this role is assigned to', on_delete=django.db.models.deletion.CASCADE, related_name='roles', to='suppliers.contact', verbose_name='contact')),
            ],
            options={
                'verbose_name': 'contact role',
                'verbose_name_plural': 'contact roles',
                'ordering': ['code'],
                'unique_together': {('contact', 'code')},
            },
        ),
        migrations.AddIndex(
            model_name='contact',
            index=models.Index(fields=['email'], name='suppliers_c_email_3652f7_idx'),
        ),
        migrations.AddIndex(
            model_name='bankinginformation',
            index=models.Index(fields=['iban'], name='suppliers_b_iban_29518d_idx'),
        ),
        migrations.AddIndex(
            model_name='bankinginformation',
            index=models.Index(fields=['bic'], name='suppliers_b_bic_2f0e20_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='supplierpartner',
            unique_together={('supplier', 'orga_level', 'orga_node')},
        ),
        migrations.AlterUniqueTogether(
            name='supplierrole',
            unique_together={('supplier', 'orga_level', 'orga_node', 'role_code')},
        ),
    ]
